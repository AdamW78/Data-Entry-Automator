plugins {
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '3.1.1'
}


javafx {
    version = '21.0.6'
    modules = ['javafx.controls', 'javafx.fxml']
}

jlink {
    launcher {
        name = 'DataEntryAutomation'
        forceMerge('log4j-api')
        jpackage {
            imageName = 'Data Entry Automator'
            skipInstaller = true
            outputDir = "${layout.buildDirectory.get().asFile}"
            vendor = "Adam Wojciak"
            appVersion = project.version
            icon = "${projectDir}/icons/icon"
            options = ['--strip-debug', '--no-header-files', '--no-man-pages']
            if (org.gradle.internal.os.OperatingSystem.current().windows) {
                targetPlatformName = "windows"
                icon += ".ico"
                outputDir += "/windows"
            }
            if (org.gradle.internal.os.OperatingSystem.current().linux) {
                targetPlatformName = "linux"
                icon += ".svg"
                outputDir += "/linux"
            }
            if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
                targetPlatformName = "mac"
                icon += ".icns"
                outputDir += "/macOS"
            }
        }
    }
}
group = project.group
version = project.version

repositories {
    mavenCentral()
}

application {
    mainModule = project.main_module
    mainClass = project.main_class
}

dependencies {
    implementation "org.apache.poi:poi-ooxml:${project.poi_version}"
    implementation "org.apache.logging.log4j:log4j-core:${project.log4j_version}"
    implementation "org.apache.logging.log4j:log4j-api:${project.log4j_version}"
    testImplementation platform("org.junit:junit-bom:${project.junit_version}")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

test {
    useJUnitPlatform()
}

base {
    archivesName = project.name
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes "Main-class": "${project.main_class}"
    }
}


javadoc {
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.encoding = 'UTF-8'
}